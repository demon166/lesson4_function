const func = require('.');

test('1. Сделайте функцию, которая возвращает квадрат числа. Число передается параметром.', () => {
  expect(func?.func1(9)).toBe(81);
  expect(func?.func1(3)).toBe(9);
  expect(func?.func1(4)).toBe(16);
});

test('2. Сделайте функцию, которая возвращает сумму двух чисел.', () => {
  expect(func?.func2(1, 2)).toBe(3);
  expect(func?.func2(4, 5)).toBe(9);
  expect(func?.func2(15, 25)).toBe(40);
});

test('3. Сделайте функцию, которая отнимает от первого числа второе и делит на третье.', () => {
  expect(func?.func3(8,2,3)).toBe(2);
  expect(func?.func3(10,2,2)).toBe(4);
});

test('4. Сделайте функцию, которая принимает параметром число от 1 до 7, а возвращает день недели на русском языке.', () => {
  const week = ['понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота', 'воскресение'];
  week.forEach((day, index) => {
    expect(func?.func4(index + 1)).toBe(week[index]);
  })
});

test('5. Сделайте функцию, которая параметрами принимает 2 числа. Если эти числа равны - пусть функция вернет true, а если не равны - false.',() => {
  expect(func?.func5(6, 6 )).toBe(true);
  expect(func?.func5(6, 3 )).toBe(false);
})

test('6. Сделайте функцию, которая параметрами принимает 2 числа. Если их сумма больше 10 - пусть вернет true, а если нет то - false.',() => {
  expect(func?.func6(6, 6 )).toBe(true);
  expect(func?.func6(6, 3 )).toBe(false);
})

test('7. Сделайте функцию, которая параметром принимает число и проверяет - отрицательное оно или нет. Если отрицательное - пусть функция вернет true, а если нет - false.',() => {
  expect(func?.func7(-10 )).toBe(true);
  expect(func?.func7(5 )).toBe(false);
})

test('8. Сделайте функцию isNumberInRange, которая параметром принимает число и проверяет, что оно больше нуля и меньше 10. Если это так - пусть функция возвращает true, если не так - false.',() => {
  expect(func?.isNumberInRange(5 )).toBe(true);
  expect(func?.isNumberInRange(11 )).toBe(false);
  expect(func?.isNumberInRange(-5 )).toBe(false);
})

test('9. Дан массив с числами. Запишите в новый массив только те числа, которые больше нуля и меньше 10-ти. Для этого используйте вспомогательную функцию isNumberInRange из предыдущей задачи.',() => {
  expect(func?.func8([1,2,3,4,-5,20] )).toEqual([1,2,3,4]);
})

test('10. Сделайте функцию getDigitsSum (digit - это цифра), которая параметром принимает целое число и возвращает сумму его цифр.',() => {
  expect(func?.getDigitsSum(12)).toEqual(3);
  expect(func?.getDigitsSum(125)).toEqual(8);
  expect(func?.getDigitsSum(1111)).toEqual(4);
  expect(func?.getDigitsSum(111122)).toEqual(8);
})

test('11. Найдите все года от 1 до 2020, сумма цифр которых равна 13. Для этого используйте вспомогательную функцию getDigitsSum из предыдущей задачи.', () => {
  const array = [49,   58,   67,   76,   85,   94,  139,  148,  157,  166,  175,  184,  193,  229,  238,  247,  256,  265,  274,  283,  292,  319,
    328,  337,  346,  355,  364,  373,  382,  391,  409,  418,  427,  436,  445,  454,  463,  472,  481,  490,  508,  517,  526,  535,
    544,  553,  562,  571,  580,  607,  616,  625,  634,  643,  652,  661,  670,  706,  715,  724,  733,  742,  751,  760,  805,  814,
    823,  832,  841,  850,  904,  913,  922,  931,  940, 1039, 1048,  1057, 1066, 1075, 1084, 1093, 1129, 1138, 1147, 1156, 1165, 1174,
    1183, 1192, 1219, 1228, 1237, 1246, 1255, 1264, 1273, 1282, 1291,  1309, 1318, 1327, 1336, 1345, 1354, 1363, 1372, 1381, 1390, 1408, 1417,
    1426, 1435, 1444, 1453, 1462, 1471,  1480, 1507, 1516, 1525, 1534, 1543,  1552, 1561, 1570, 1606, 1615, 1624,  1633, 1642, 1651, 1660, 1705, 1714,
    1723, 1732, 1741, 1750, 1804, 1813,  1822, 1831, 1840, 1903, 1912, 1921, 1930 ]
  expect(func?.func9()).toEqual(array)
})

test('12. Сделайте функцию isEven() (even - это четный), которая параметром принимает целое число и проверяет: четное оно или нет. Если четное - пусть функция возвращает true, если нечетное - false.', () => {
  expect(func?.isEven(4)).toBe(true);
  expect(func?.isEven(5)).toBe(false);
  expect(func?.isEven(15)).toBe(false);
  expect(func?.isEven(2022)).toBe(true);
});

test('13. Дан массив с целыми числами. Создайте из него новый массив, где останутся лежать только четные из этих чисел. Для этого используйте вспомогательную функцию isEven из предыдущей задачи.', () => {
  expect(func?.func10([1,2,3,4,5,6])).toEqual([2,4,6])
  expect(func?.func10([])).toEqual([])
})


test('14. Сделайте функцию getDivisors, которая параметром принимает число и возвращает массив его делителей (чисел, на которое делится данное число).', () => {
  expect(func?.getDivisors(12)).toEqual([1, 2, 3, 4, 6, 12]);
  expect(func?.getDivisors(10)).toEqual([1, 2, 5, 10]);
})

test('15. Дано число. Сложите его цифры. Если сумма получилась более 9-ти, опять сложите его цифры. И так, пока сумма не станет однозначным числом (9 и менее).', () => {
  expect(func?.func11(99)).toBe(9);
  expect(func?.func11(98)).toEqual(8);
  expect(func?.func11(999)).toEqual(9);
})

test('16. Напишите стрелочную функцию, которая будет возвращать true если строка является палиндромом и false в противном случае.', () => {
  expect(func?.func12('Строка')).toBe(false);
  expect(func?.func12('СлоолС')).toBe(true);
})
